/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.4. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module testbench
    ( // No inputs

      // Outputs
      output wire  done
    );
  // TrafficLight.hs:28:1-88
  reg [1:0] currentState = 2'd1;
  // TrafficLight.hs:28:1-88
  reg [1:0] c$currentState_app_arg;
  // TrafficLight.hs:28:1-88
  reg [1:0] c$currentState_case_scrut;
  // TrafficLight.hs:44:9-11
  wire  \TrafficLight.TrafficLight.testbench_clk ;
  wire [3:0] z;
  wire [2:0] result;
  wire [1:0] c$ds_app_arg;
  wire  c$result_rec;
  reg [2:0] s = 3'd0;
  wire  f1;
  reg  \f'  = 1'b0;
  // TrafficLight.hs:42:1-9
  wire  \c$TrafficLight.TrafficLight.testbench_bindCsr ;
  wire [15:0] c$ds_app_arg_res;
  wire [15:0] c$vec;

  // register begin
  always @(posedge \TrafficLight.TrafficLight.testbench_clk  or  posedge  \c$TrafficLight.TrafficLight.testbench_bindCsr ) begin : currentState_register
    if ( \c$TrafficLight.TrafficLight.testbench_bindCsr ) begin
      currentState <= 2'd1;
    end else begin
      currentState <= c$currentState_app_arg;
    end
  end
  // register end

  always @(*) begin
    case(c$currentState_case_scrut)
      2'b00 : c$currentState_app_arg = 2'd2;
      2'b01 : c$currentState_app_arg = 2'd3;
      default : c$currentState_app_arg = 2'd1;
    endcase
  end

  always @(*) begin
    case(currentState)
      2'd1 : c$currentState_case_scrut = 2'd0;
      2'd2 : c$currentState_case_scrut = 2'd1;
      2'd3 : c$currentState_case_scrut = 2'd2;
      default : c$currentState_case_scrut = {2 {1'bx}};
    endcase
  end

  // tbClockGen begin
  // pragma translate_off
  reg  clk;
  // 1 = 0.1ps
  localparam half_period = (100000 / 2);
  always begin
    // Delay of 1 mitigates race conditions (https://github.com/steveicarus/iverilog/issues/160)
    #1 clk =  0 ;
    `ifndef VERILATOR
    #100000 forever begin
      if (~ (~ c$result_rec)) begin
        $finish;
      end
      clk = ~ clk;
      #half_period;
      clk = ~ clk;
      #half_period;
    end
    `else
    clk = $c("this->tb_clock_gen(",half_period,",true,",(~ (~ c$result_rec)),")");
    `endif
  end

  `ifdef VERILATOR
    `systemc_interface
    CData tb_clock_gen(vluint32_t half_period, bool active_rising, bool result_rec) {
      static vluint32_t init_wait = 100000;
      static vluint32_t to_wait = 0;
      static CData clock = active_rising ? 0 : 1;

      if(init_wait == 0) {
        if(result_rec) {
          std::exit(0);
        }
        else {
          if(to_wait == 0) {
            to_wait = half_period - 1;
            clock = clock == 0 ? 1 : 0;
          }
          else {
            to_wait = to_wait - 1;
          }
        }
      }
      else {
        init_wait = init_wait - 1;
      }

      return clock;
    }
    `verilog
  `endif

  assign \TrafficLight.TrafficLight.testbench_clk  = clk;
  // pragma translate_on
  // tbClockGen end

  assign z = s + 3'd1;

  assign result = (z > 4'd7) ? 3'd7 : (z[0+:3]);

  assign c$vec = {2'd0,   2'd1,   2'd2,   2'd0,
                  2'd1,   2'd2,   2'd0,   2'd1};

  // map begin
  genvar i;
  generate
  for (i=0; i < 8; i = i + 1) begin : map
    wire [1:0] map_in;
    assign map_in = c$vec[i*2+:2];
    wire [1:0] map_out;
    reg [1:0] result_3;
    assign map_out = result_3;

    always @(*) begin
      case(map_in)
        2'b00 : result_3 = 2'd1;
        2'b01 : result_3 = 2'd2;
        default : result_3 = 2'd3;
      endcase
    end


    assign c$ds_app_arg_res[i*2+:2] = map_out;
  end
  endgenerate
  // map end

  // index begin
  wire [1:0] vecArray [0:8-1];
  genvar i_0;
  generate
  for (i_0=0; i_0 < 8; i_0=i_0+1) begin : mk_array
    assign vecArray[(8-1)-i_0] = c$ds_app_arg_res[i_0*2+:2];
  end
  endgenerate
  assign c$ds_app_arg = vecArray[($unsigned({{(64-3) {1'b0}},s}))];
  // index end

  assign c$result_rec = \f'  ? \f'  : f1;

  // register begin
  always @(posedge \TrafficLight.TrafficLight.testbench_clk  or  posedge  \c$TrafficLight.TrafficLight.testbench_bindCsr ) begin : s_register
    if ( \c$TrafficLight.TrafficLight.testbench_bindCsr ) begin
      s <= 3'd0;
    end else begin
      s <= result;
    end
  end
  // register end

  // assert begin
  // pragma translate_off
  always @(posedge \TrafficLight.TrafficLight.testbench_clk ) begin
    if (currentState !== c$ds_app_arg) begin
      $display("@%0tns: %s, expected: %b, actual: %b", $time, ("outputVerifier"), c$ds_app_arg, currentState);
      $finish;
    end
  end
  // pragma translate_on
  assign f1 = \f' ;
  // assert end

  // register begin
  always @(posedge \TrafficLight.TrafficLight.testbench_clk  or  posedge  \c$TrafficLight.TrafficLight.testbench_bindCsr ) begin : f_register
    if ( \c$TrafficLight.TrafficLight.testbench_bindCsr ) begin
      \f'  <= 1'b0;
    end else begin
      \f'  <= (s == 3'd7);
    end
  end
  // register end

  // resetGen begin
  // pragma translate_off
  reg  rst;
  localparam reset_period = 100000 - 10 + (1 * 100000);
  `ifndef VERILATOR
  initial begin
    #1 rst =  1 ;
    #reset_period rst =  0 ;
  end
  `else
  always begin
    // The redundant (rst | ~ rst) is needed to ensure that this is
    // calculated in every cycle by verilator. Without it, the reset will stop
    // being updated and will be stuck as asserted forever.
    rst = $c("this->reset_gen(",reset_period,",true)") & (rst | ~ rst);
  end
  `systemc_interface
  CData reset_gen(vluint32_t reset_period, bool active_high) {
    static vluint32_t to_wait = reset_period;
    static CData reset = active_high ? 1 : 0;
    static bool finished = false;

    if(!finished) {
      if(to_wait == 0) {
        reset = reset == 0 ? 1 : 0;
        finished = true;
      }
      else {
        to_wait = to_wait - 1;
      }
    }

    return reset;
  }
  `verilog
  `endif
  assign \c$TrafficLight.TrafficLight.testbench_bindCsr  = rst;
  // pragma translate_on
  // resetGen end

  assign done = c$result_rec;


endmodule

