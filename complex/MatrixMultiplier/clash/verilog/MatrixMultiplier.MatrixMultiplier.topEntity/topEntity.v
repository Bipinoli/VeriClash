/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.4. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input signed [15:0] a_0_0
    , input signed [15:0] a_0_1
    , input signed [15:0] a_0_2
    , input signed [15:0] a_1_0
    , input signed [15:0] a_1_1
    , input signed [15:0] a_1_2
    , input signed [15:0] a_2_0
    , input signed [15:0] a_2_1
    , input signed [15:0] a_2_2
    , input signed [15:0] b_0_0
    , input signed [15:0] b_0_1
    , input signed [15:0] b_0_2
    , input signed [15:0] b_1_0
    , input signed [15:0] b_1_1
    , input signed [15:0] b_1_2
    , input signed [15:0] b_2_0
    , input signed [15:0] b_2_1
    , input signed [15:0] b_2_2

      // Outputs
    , output wire signed [15:0] result_0_0
    , output wire signed [15:0] result_0_1
    , output wire signed [15:0] result_0_2
    , output wire signed [15:0] result_1_0
    , output wire signed [15:0] result_1_1
    , output wire signed [15:0] result_1_2
    , output wire signed [15:0] result_2_0
    , output wire signed [15:0] result_2_1
    , output wire signed [15:0] result_2_2
    );
  // MatrixMultiplier.hs:20:1-9
  wire [143:0] bt;
  wire [143:0] a;
  wire [143:0] b;
  wire [143:0] result;
  wire [47:0] result_0;
  wire [47:0] result_1;
  wire [47:0] result_2;

  assign a = {{a_0_0,   a_0_1,   a_0_2},
              {a_1_0,   a_1_1,   a_1_2},   {a_2_0,   a_2_1,
                                            a_2_2}};

  assign b = {{b_0_0,   b_0_1,   b_0_2},
              {b_1_0,   b_1_1,   b_1_2},   {b_2_0,   b_2_1,
                                            b_2_2}};

  // transpose begin
  genvar row_index;
  genvar col_index;
  generate
  for (row_index = 0; row_index < 3; row_index = row_index + 1) begin : transpose_outer
    for (col_index = 0; col_index < 3; col_index = col_index + 1) begin : transpose_inner
      assign bt[((col_index*48)+(row_index*16))+:16] = b[((row_index*48)+(col_index*16))+:16];
    end
  end
  endgenerate
  // transpose end

  // map begin
  genvar i_2;
  generate
  for (i_2=0; i_2 < 3; i_2 = i_2 + 1) begin : map_0
    wire [47:0] map_in_0;
    assign map_in_0 = a[i_2*48+:48];
    wire [47:0] map_out_0;
    wire [47:0] c$bb_res_res;
    // map begin
    genvar i_1;

    for (i_1=0; i_1 < 3; i_1 = i_1 + 1) begin : map
      wire [47:0] map_in;
      assign map_in = bt[i_1*48+:48];
      wire signed [15:0] map_out;
      // MatrixMultiplier.hs:10:1-10
    wire [63:0] ws;
    // MatrixMultiplier.hs:10:1-10
    wire [47:0] ws1;
    wire signed [15:0] result_3;
    // MatrixMultiplier.hs:10:1-10
    wire [95:0] c$ws1_app_arg;
    wire [47:0] c$vec2;
    assign map_out = result_3;

    assign ws = {16'sd0,   ws1};

    assign c$vec2 = (ws[64-1 : 16]);

    // zipWith start
    genvar i;

    for (i = 0; i < 3; i = i + 1) begin : zipWith
      wire [31:0] zipWith_in1;
      assign zipWith_in1 = c$ws1_app_arg[i*32+:32];
      wire signed [15:0] zipWith_in2;
      assign zipWith_in2 = c$vec2[i*16+:16];
      wire signed [15:0] c$n;
      // MatrixMultiplier.hs:10:1-10
    wire signed [15:0] x1;
    // MatrixMultiplier.hs:10:1-10
    wire signed [15:0] y1;
    wire signed [15:0] c$case_alt;
    assign c$n = c$case_alt;

    assign x1 = $signed(zipWith_in1[31:16]);

    assign y1 = $signed(zipWith_in1[15:0]);

    assign c$case_alt = zipWith_in2 + (x1 * y1);


      assign ws1[i*16+:16] = c$n;
    end

    // zipWith end

    assign result_3 = $signed(ws[16-1:0]);

    // zipWith start
    genvar i_0;

    for (i_0 = 0; i_0 < 3; i_0 = i_0 + 1) begin : zipWith_0
      wire signed [15:0] zipWith_in1_0;
      assign zipWith_in1_0 = map_in_0[i_0*16+:16];
      wire signed [15:0] zipWith_in2_0;
      assign zipWith_in2_0 = map_in[i_0*16+:16];
      wire [31:0] c$n_0;
      assign c$n_0 = {zipWith_in1_0,   zipWith_in2_0};


      assign c$ws1_app_arg[i_0*32+:32] = c$n_0;
    end

    // zipWith end


      assign c$bb_res_res[i_1*16+:16] = map_out;
    end

    // map end

    assign map_out_0 = c$bb_res_res;


    assign result[i_2*48+:48] = map_out_0;
  end
  endgenerate
  // map end

  assign result_0 = result[143:96];

  assign result_1 = result[95:48];

  assign result_2 = result[47:0];

  assign result_0_0 = $signed(result_0[47:32]);

  assign result_0_1 = $signed(result_0[31:16]);

  assign result_0_2 = $signed(result_0[15:0]);

  assign result_1_0 = $signed(result_1[47:32]);

  assign result_1_1 = $signed(result_1[31:16]);

  assign result_1_2 = $signed(result_1[15:0]);

  assign result_2_0 = $signed(result_2[47:32]);

  assign result_2_1 = $signed(result_2[31:16]);

  assign result_2_2 = $signed(result_2[15:0]);


endmodule

